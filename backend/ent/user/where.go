// Code generated by entc, DO NOT EDIT.

package user

import (
	"time"

	"github.com/beam19857/app/ent/predicate"
	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// DoctorID applies equality check predicate on the "DoctorID" field. It's identical to DoctorIDEQ.
func DoctorID(v int) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDoctorID), v))
	})
}

// DoctorName applies equality check predicate on the "DoctorName" field. It's identical to DoctorNameEQ.
func DoctorName(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDoctorName), v))
	})
}
// DoctorName applies equality check predicate on the "DoctorEmail" field. It's identical to DoctorEmailEQ.
func DoctorEmail(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDoctorEmail), v))
	})
}

// Date applies equality check predicate on the "Date" field. It's identical to DateEQ.
func Date(v time.Time) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDate), v))
	})
}

// DoctorIDEQ applies the EQ predicate on the "DoctorID" field.
func DoctorIDEQ(v int) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDoctorID), v))
	})
}

// DoctorIDNEQ applies the NEQ predicate on the "DoctorID" field.
func DoctorIDNEQ(v int) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDoctorID), v))
	})
}

// DoctorIDIn applies the In predicate on the "DoctorID" field.
func DoctorIDIn(vs ...int) predicate.User {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDoctorID), v...))
	})
}

// DoctorIDNotIn applies the NotIn predicate on the "DoctorID" field.
func DoctorIDNotIn(vs ...int) predicate.User {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDoctorID), v...))
	})
}

// DoctorIDGT applies the GT predicate on the "DoctorID" field.
func DoctorIDGT(v int) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDoctorID), v))
	})
}

// DoctorIDGTE applies the GTE predicate on the "DoctorID" field.
func DoctorIDGTE(v int) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDoctorID), v))
	})
}

// DoctorIDLT applies the LT predicate on the "DoctorID" field.
func DoctorIDLT(v int) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDoctorID), v))
	})
}

// DoctorIDLTE applies the LTE predicate on the "DoctorID" field.
func DoctorIDLTE(v int) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDoctorID), v))
	})
}

// DoctorNameEQ applies the EQ predicate on the "DoctorName" field.
func DoctorNameEQ(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDoctorName), v))
	})
}

// DoctorNameNEQ applies the NEQ predicate on the "DoctorName" field.
func DoctorNameNEQ(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDoctorName), v))
	})
}

// DoctorNameIn applies the In predicate on the "DoctorName" field.
func DoctorNameIn(vs ...string) predicate.User {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDoctorName), v...))
	})
}

// DoctorNameNotIn applies the NotIn predicate on the "DoctorName" field.
func DoctorNameNotIn(vs ...string) predicate.User {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDoctorName), v...))
	})
}

// DoctorNameGT applies the GT predicate on the "DoctorName" field.
func DoctorNameGT(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDoctorName), v))
	})
}

// DoctorNameGTE applies the GTE predicate on the "DoctorName" field.
func DoctorNameGTE(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDoctorName), v))
	})
}

// DoctorNameLT applies the LT predicate on the "DoctorName" field.
func DoctorNameLT(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDoctorName), v))
	})
}

// DoctorNameLTE applies the LTE predicate on the "DoctorName" field.
func DoctorNameLTE(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDoctorName), v))
	})
}

// DoctorNameContains applies the Contains predicate on the "DoctorName" field.
func DoctorNameContains(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDoctorName), v))
	})
}

// DoctorNameHasPrefix applies the HasPrefix predicate on the "DoctorName" field.
func DoctorNameHasPrefix(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDoctorName), v))
	})
}

// DoctorNameHasSuffix applies the HasSuffix predicate on the "DoctorName" field.
func DoctorNameHasSuffix(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDoctorName), v))
	})
}

// DoctorNameEqualFold applies the EqualFold predicate on the "DoctorName" field.
func DoctorNameEqualFold(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDoctorName), v))
	})
}

// DoctorNameContainsFold applies the ContainsFold predicate on the "DoctorName" field.
func DoctorNameContainsFold(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDoctorName), v))
	})
}
// DoctorEmailEQ applies the EQ predicate on the "DoctorEmail" field.
func DoctorEmailEQ(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDoctorEmail), v))
	})
}

// DoctorEmailNEQ applies the NEQ predicate on the "DoctorEmail" field.
func DoctorEmailNEQ(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDoctorEmail), v))
	})
}

// DoctorEmailIn applies the In predicate on the "DoctorEmail" field.
func DoctorEmailIn(vs ...string) predicate.User {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDoctorEmail), v...))
	})
}

// DoctorEmailNotIn applies the NotIn predicate on the "DoctorEmail" field.
func DoctorEmailNotIn(vs ...string) predicate.User {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDoctorEmail), v...))
	})
}

// DoctorEmailGT applies the GT predicate on the "DoctorEmail" field.
func DoctorEmailGT(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDoctorEmail), v))
	})
}

// DoctorEmailGTE applies the GTE predicate on the "DoctorEmail" field.
func DoctorEmailGTE(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDoctorEmail), v))
	})
}

// DoctorEmailLT applies the LT predicate on the "DoctorEmail" field.
func DoctorEmailLT(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDoctorEmail), v))
	})
}

// DoctorEmailLTE applies the LTE predicate on the "DoctorEmail" field.
func DoctorEmailLTE(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDoctorEmail), v))
	})
}

// DoctorEmailContains applies the Contains predicate on the "DoctorEmail" field.
func DoctorEmailContains(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDoctorEmail), v))
	})
}

// DoctorEmailHasPrefix applies the HasPrefix predicate on the "DoctorEmail" field.
func DoctorEmailHasPrefix(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDoctorEmail), v))
	})
}

// DoctorEmailHasSuffix applies the HasSuffix predicate on the "DoctorEmail" field.
func DoctorEmailHasSuffix(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDoctorEmail), v))
	})
}

// DoctorEmailEqualFold applies the EqualFold predicate on the "DoctorEmail" field.
func DoctorEmailEqualFold(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDoctorEmail), v))
	})
}

// DoctorEmailContainsFold applies the ContainsFold predicate on the "DoctorEmail" field.
func DoctorEmailContainsFold(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDoctorEmail), v))
	})
}
// DateEQ applies the EQ predicate on the "Date" field.
func DateEQ(v time.Time) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDate), v))
	})
}

// DateNEQ applies the NEQ predicate on the "Date" field.
func DateNEQ(v time.Time) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDate), v))
	})
}

// DateIn applies the In predicate on the "Date" field.
func DateIn(vs ...time.Time) predicate.User {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDate), v...))
	})
}

// DateNotIn applies the NotIn predicate on the "Date" field.
func DateNotIn(vs ...time.Time) predicate.User {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDate), v...))
	})
}

// DateGT applies the GT predicate on the "Date" field.
func DateGT(v time.Time) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDate), v))
	})
}

// DateGTE applies the GTE predicate on the "Date" field.
func DateGTE(v time.Time) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDate), v))
	})
}

// DateLT applies the LT predicate on the "Date" field.
func DateLT(v time.Time) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDate), v))
	})
}

// DateLTE applies the LTE predicate on the "Date" field.
func DateLTE(v time.Time) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDate), v))
	})
}

// HasUserDepartment applies the HasEdge predicate on the "UserDepartment" edge.
func HasUserDepartment() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserDepartmentTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserDepartmentTable, UserDepartmentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserDepartmentWith applies the HasEdge predicate on the "UserDepartment" edge with a given conditions (other predicates).
func HasUserDepartmentWith(preds ...predicate.Department) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserDepartmentInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserDepartmentTable, UserDepartmentColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUserExpertise applies the HasEdge predicate on the "UserExpertise" edge.
func HasUserExpertise() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserExpertiseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserExpertiseTable, UserExpertiseColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserExpertiseWith applies the HasEdge predicate on the "UserExpertise" edge with a given conditions (other predicates).
func HasUserExpertiseWith(preds ...predicate.Expertise) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserExpertiseInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserExpertiseTable, UserExpertiseColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUserPosition applies the HasEdge predicate on the "UserPosition" edge.
func HasUserPosition() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserPositionTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserPositionTable, UserPositionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserPositionWith applies the HasEdge predicate on the "UserPosition" edge with a given conditions (other predicates).
func HasUserPositionWith(preds ...predicate.Position) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserPositionInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserPositionTable, UserPositionColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		p(s.Not())
	})
}
