// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"

	"github.com/beam19857/app/ent/department"
	"github.com/beam19857/app/ent/expertise"
	"github.com/beam19857/app/ent/position"
	"github.com/beam19857/app/ent/user"

	"github.com/facebookincubator/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeDepartment = "Department"
	TypeExpertise  = "Expertise"
	TypePosition   = "Position"
	TypeUser       = "User"
)

// DepartmentMutation represents an operation that mutate the Departments
// nodes in the graph.
type DepartmentMutation struct {
	config
	op                     Op
	typ                    string
	id                     *int
	_DepartmentName        *string
	clearedFields          map[string]struct{}
	_DepartmentUser        map[int]struct{}
	removed_DepartmentUser map[int]struct{}
	done                   bool
	oldValue               func(context.Context) (*Department, error)
}

var _ ent.Mutation = (*DepartmentMutation)(nil)

// departmentOption allows to manage the mutation configuration using functional options.
type departmentOption func(*DepartmentMutation)

// newDepartmentMutation creates new mutation for $n.Name.
func newDepartmentMutation(c config, op Op, opts ...departmentOption) *DepartmentMutation {
	m := &DepartmentMutation{
		config:        c,
		op:            op,
		typ:           TypeDepartment,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDepartmentID sets the id field of the mutation.
func withDepartmentID(id int) departmentOption {
	return func(m *DepartmentMutation) {
		var (
			err   error
			once  sync.Once
			value *Department
		)
		m.oldValue = func(ctx context.Context) (*Department, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Department.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDepartment sets the old Department of the mutation.
func withDepartment(node *Department) departmentOption {
	return func(m *DepartmentMutation) {
		m.oldValue = func(context.Context) (*Department, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DepartmentMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DepartmentMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *DepartmentMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetDepartmentName sets the DepartmentName field.
func (m *DepartmentMutation) SetDepartmentName(s string) {
	m._DepartmentName = &s
}

// DepartmentName returns the DepartmentName value in the mutation.
func (m *DepartmentMutation) DepartmentName() (r string, exists bool) {
	v := m._DepartmentName
	if v == nil {
		return
	}
	return *v, true
}

// OldDepartmentName returns the old DepartmentName value of the Department.
// If the Department object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *DepartmentMutation) OldDepartmentName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDepartmentName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDepartmentName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDepartmentName: %w", err)
	}
	return oldValue.DepartmentName, nil
}

// ResetDepartmentName reset all changes of the "DepartmentName" field.
func (m *DepartmentMutation) ResetDepartmentName() {
	m._DepartmentName = nil
}

// AddDepartmentUserIDs adds the DepartmentUser edge to User by ids.
func (m *DepartmentMutation) AddDepartmentUserIDs(ids ...int) {
	if m._DepartmentUser == nil {
		m._DepartmentUser = make(map[int]struct{})
	}
	for i := range ids {
		m._DepartmentUser[ids[i]] = struct{}{}
	}
}

// RemoveDepartmentUserIDs removes the DepartmentUser edge to User by ids.
func (m *DepartmentMutation) RemoveDepartmentUserIDs(ids ...int) {
	if m.removed_DepartmentUser == nil {
		m.removed_DepartmentUser = make(map[int]struct{})
	}
	for i := range ids {
		m.removed_DepartmentUser[ids[i]] = struct{}{}
	}
}

// RemovedDepartmentUser returns the removed ids of DepartmentUser.
func (m *DepartmentMutation) RemovedDepartmentUserIDs() (ids []int) {
	for id := range m.removed_DepartmentUser {
		ids = append(ids, id)
	}
	return
}

// DepartmentUserIDs returns the DepartmentUser ids in the mutation.
func (m *DepartmentMutation) DepartmentUserIDs() (ids []int) {
	for id := range m._DepartmentUser {
		ids = append(ids, id)
	}
	return
}

// ResetDepartmentUser reset all changes of the "DepartmentUser" edge.
func (m *DepartmentMutation) ResetDepartmentUser() {
	m._DepartmentUser = nil
	m.removed_DepartmentUser = nil
}

// Op returns the operation name.
func (m *DepartmentMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Department).
func (m *DepartmentMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *DepartmentMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._DepartmentName != nil {
		fields = append(fields, department.FieldDepartmentName)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *DepartmentMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case department.FieldDepartmentName:
		return m.DepartmentName()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *DepartmentMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case department.FieldDepartmentName:
		return m.OldDepartmentName(ctx)
	}
	return nil, fmt.Errorf("unknown Department field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *DepartmentMutation) SetField(name string, value ent.Value) error {
	switch name {
	case department.FieldDepartmentName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDepartmentName(v)
		return nil
	}
	return fmt.Errorf("unknown Department field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *DepartmentMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *DepartmentMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *DepartmentMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Department numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *DepartmentMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *DepartmentMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *DepartmentMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Department nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *DepartmentMutation) ResetField(name string) error {
	switch name {
	case department.FieldDepartmentName:
		m.ResetDepartmentName()
		return nil
	}
	return fmt.Errorf("unknown Department field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *DepartmentMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m._DepartmentUser != nil {
		edges = append(edges, department.EdgeDepartmentUser)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *DepartmentMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case department.EdgeDepartmentUser:
		ids := make([]ent.Value, 0, len(m._DepartmentUser))
		for id := range m._DepartmentUser {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *DepartmentMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removed_DepartmentUser != nil {
		edges = append(edges, department.EdgeDepartmentUser)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *DepartmentMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case department.EdgeDepartmentUser:
		ids := make([]ent.Value, 0, len(m.removed_DepartmentUser))
		for id := range m.removed_DepartmentUser {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *DepartmentMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *DepartmentMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *DepartmentMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Department unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *DepartmentMutation) ResetEdge(name string) error {
	switch name {
	case department.EdgeDepartmentUser:
		m.ResetDepartmentUser()
		return nil
	}
	return fmt.Errorf("unknown Department edge %s", name)
}

// ExpertiseMutation represents an operation that mutate the Expertises
// nodes in the graph.
type ExpertiseMutation struct {
	config
	op                    Op
	typ                   string
	id                    *int
	_ExpertiseName        *string
	clearedFields         map[string]struct{}
	_ExpertiseUser        map[int]struct{}
	removed_ExpertiseUser map[int]struct{}
	done                  bool
	oldValue              func(context.Context) (*Expertise, error)
}

var _ ent.Mutation = (*ExpertiseMutation)(nil)

// expertiseOption allows to manage the mutation configuration using functional options.
type expertiseOption func(*ExpertiseMutation)

// newExpertiseMutation creates new mutation for $n.Name.
func newExpertiseMutation(c config, op Op, opts ...expertiseOption) *ExpertiseMutation {
	m := &ExpertiseMutation{
		config:        c,
		op:            op,
		typ:           TypeExpertise,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withExpertiseID sets the id field of the mutation.
func withExpertiseID(id int) expertiseOption {
	return func(m *ExpertiseMutation) {
		var (
			err   error
			once  sync.Once
			value *Expertise
		)
		m.oldValue = func(ctx context.Context) (*Expertise, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Expertise.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withExpertise sets the old Expertise of the mutation.
func withExpertise(node *Expertise) expertiseOption {
	return func(m *ExpertiseMutation) {
		m.oldValue = func(context.Context) (*Expertise, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ExpertiseMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ExpertiseMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *ExpertiseMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetExpertiseName sets the ExpertiseName field.
func (m *ExpertiseMutation) SetExpertiseName(s string) {
	m._ExpertiseName = &s
}

// ExpertiseName returns the ExpertiseName value in the mutation.
func (m *ExpertiseMutation) ExpertiseName() (r string, exists bool) {
	v := m._ExpertiseName
	if v == nil {
		return
	}
	return *v, true
}

// OldExpertiseName returns the old ExpertiseName value of the Expertise.
// If the Expertise object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *ExpertiseMutation) OldExpertiseName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldExpertiseName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldExpertiseName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExpertiseName: %w", err)
	}
	return oldValue.ExpertiseName, nil
}

// ResetExpertiseName reset all changes of the "ExpertiseName" field.
func (m *ExpertiseMutation) ResetExpertiseName() {
	m._ExpertiseName = nil
}

// AddExpertiseUserIDs adds the ExpertiseUser edge to User by ids.
func (m *ExpertiseMutation) AddExpertiseUserIDs(ids ...int) {
	if m._ExpertiseUser == nil {
		m._ExpertiseUser = make(map[int]struct{})
	}
	for i := range ids {
		m._ExpertiseUser[ids[i]] = struct{}{}
	}
}

// RemoveExpertiseUserIDs removes the ExpertiseUser edge to User by ids.
func (m *ExpertiseMutation) RemoveExpertiseUserIDs(ids ...int) {
	if m.removed_ExpertiseUser == nil {
		m.removed_ExpertiseUser = make(map[int]struct{})
	}
	for i := range ids {
		m.removed_ExpertiseUser[ids[i]] = struct{}{}
	}
}

// RemovedExpertiseUser returns the removed ids of ExpertiseUser.
func (m *ExpertiseMutation) RemovedExpertiseUserIDs() (ids []int) {
	for id := range m.removed_ExpertiseUser {
		ids = append(ids, id)
	}
	return
}

// ExpertiseUserIDs returns the ExpertiseUser ids in the mutation.
func (m *ExpertiseMutation) ExpertiseUserIDs() (ids []int) {
	for id := range m._ExpertiseUser {
		ids = append(ids, id)
	}
	return
}

// ResetExpertiseUser reset all changes of the "ExpertiseUser" edge.
func (m *ExpertiseMutation) ResetExpertiseUser() {
	m._ExpertiseUser = nil
	m.removed_ExpertiseUser = nil
}

// Op returns the operation name.
func (m *ExpertiseMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Expertise).
func (m *ExpertiseMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *ExpertiseMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._ExpertiseName != nil {
		fields = append(fields, expertise.FieldExpertiseName)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *ExpertiseMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case expertise.FieldExpertiseName:
		return m.ExpertiseName()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *ExpertiseMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case expertise.FieldExpertiseName:
		return m.OldExpertiseName(ctx)
	}
	return nil, fmt.Errorf("unknown Expertise field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *ExpertiseMutation) SetField(name string, value ent.Value) error {
	switch name {
	case expertise.FieldExpertiseName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExpertiseName(v)
		return nil
	}
	return fmt.Errorf("unknown Expertise field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *ExpertiseMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *ExpertiseMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *ExpertiseMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Expertise numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *ExpertiseMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *ExpertiseMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *ExpertiseMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Expertise nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *ExpertiseMutation) ResetField(name string) error {
	switch name {
	case expertise.FieldExpertiseName:
		m.ResetExpertiseName()
		return nil
	}
	return fmt.Errorf("unknown Expertise field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *ExpertiseMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m._ExpertiseUser != nil {
		edges = append(edges, expertise.EdgeExpertiseUser)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *ExpertiseMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case expertise.EdgeExpertiseUser:
		ids := make([]ent.Value, 0, len(m._ExpertiseUser))
		for id := range m._ExpertiseUser {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *ExpertiseMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removed_ExpertiseUser != nil {
		edges = append(edges, expertise.EdgeExpertiseUser)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *ExpertiseMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case expertise.EdgeExpertiseUser:
		ids := make([]ent.Value, 0, len(m.removed_ExpertiseUser))
		for id := range m.removed_ExpertiseUser {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *ExpertiseMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *ExpertiseMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *ExpertiseMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Expertise unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *ExpertiseMutation) ResetEdge(name string) error {
	switch name {
	case expertise.EdgeExpertiseUser:
		m.ResetExpertiseUser()
		return nil
	}
	return fmt.Errorf("unknown Expertise edge %s", name)
}

// PositionMutation represents an operation that mutate the Positions
// nodes in the graph.
type PositionMutation struct {
	config
	op                   Op
	typ                  string
	id                   *int
	_PositionName        *string
	clearedFields        map[string]struct{}
	_PositionUser        map[int]struct{}
	removed_PositionUser map[int]struct{}
	done                 bool
	oldValue             func(context.Context) (*Position, error)
}

var _ ent.Mutation = (*PositionMutation)(nil)

// positionOption allows to manage the mutation configuration using functional options.
type positionOption func(*PositionMutation)

// newPositionMutation creates new mutation for $n.Name.
func newPositionMutation(c config, op Op, opts ...positionOption) *PositionMutation {
	m := &PositionMutation{
		config:        c,
		op:            op,
		typ:           TypePosition,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPositionID sets the id field of the mutation.
func withPositionID(id int) positionOption {
	return func(m *PositionMutation) {
		var (
			err   error
			once  sync.Once
			value *Position
		)
		m.oldValue = func(ctx context.Context) (*Position, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Position.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPosition sets the old Position of the mutation.
func withPosition(node *Position) positionOption {
	return func(m *PositionMutation) {
		m.oldValue = func(context.Context) (*Position, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PositionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PositionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *PositionMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetPositionName sets the PositionName field.
func (m *PositionMutation) SetPositionName(s string) {
	m._PositionName = &s
}

// PositionName returns the PositionName value in the mutation.
func (m *PositionMutation) PositionName() (r string, exists bool) {
	v := m._PositionName
	if v == nil {
		return
	}
	return *v, true
}

// OldPositionName returns the old PositionName value of the Position.
// If the Position object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *PositionMutation) OldPositionName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPositionName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPositionName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPositionName: %w", err)
	}
	return oldValue.PositionName, nil
}

// ResetPositionName reset all changes of the "PositionName" field.
func (m *PositionMutation) ResetPositionName() {
	m._PositionName = nil
}

// AddPositionUserIDs adds the PositionUser edge to User by ids.
func (m *PositionMutation) AddPositionUserIDs(ids ...int) {
	if m._PositionUser == nil {
		m._PositionUser = make(map[int]struct{})
	}
	for i := range ids {
		m._PositionUser[ids[i]] = struct{}{}
	}
}

// RemovePositionUserIDs removes the PositionUser edge to User by ids.
func (m *PositionMutation) RemovePositionUserIDs(ids ...int) {
	if m.removed_PositionUser == nil {
		m.removed_PositionUser = make(map[int]struct{})
	}
	for i := range ids {
		m.removed_PositionUser[ids[i]] = struct{}{}
	}
}

// RemovedPositionUser returns the removed ids of PositionUser.
func (m *PositionMutation) RemovedPositionUserIDs() (ids []int) {
	for id := range m.removed_PositionUser {
		ids = append(ids, id)
	}
	return
}

// PositionUserIDs returns the PositionUser ids in the mutation.
func (m *PositionMutation) PositionUserIDs() (ids []int) {
	for id := range m._PositionUser {
		ids = append(ids, id)
	}
	return
}

// ResetPositionUser reset all changes of the "PositionUser" edge.
func (m *PositionMutation) ResetPositionUser() {
	m._PositionUser = nil
	m.removed_PositionUser = nil
}

// Op returns the operation name.
func (m *PositionMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Position).
func (m *PositionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *PositionMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._PositionName != nil {
		fields = append(fields, position.FieldPositionName)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *PositionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case position.FieldPositionName:
		return m.PositionName()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *PositionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case position.FieldPositionName:
		return m.OldPositionName(ctx)
	}
	return nil, fmt.Errorf("unknown Position field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *PositionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case position.FieldPositionName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPositionName(v)
		return nil
	}
	return fmt.Errorf("unknown Position field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *PositionMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *PositionMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *PositionMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Position numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *PositionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *PositionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *PositionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Position nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *PositionMutation) ResetField(name string) error {
	switch name {
	case position.FieldPositionName:
		m.ResetPositionName()
		return nil
	}
	return fmt.Errorf("unknown Position field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *PositionMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m._PositionUser != nil {
		edges = append(edges, position.EdgePositionUser)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *PositionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case position.EdgePositionUser:
		ids := make([]ent.Value, 0, len(m._PositionUser))
		for id := range m._PositionUser {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *PositionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removed_PositionUser != nil {
		edges = append(edges, position.EdgePositionUser)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *PositionMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case position.EdgePositionUser:
		ids := make([]ent.Value, 0, len(m.removed_PositionUser))
		for id := range m.removed_PositionUser {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *PositionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *PositionMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *PositionMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Position unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *PositionMutation) ResetEdge(name string) error {
	switch name {
	case position.EdgePositionUser:
		m.ResetPositionUser()
		return nil
	}
	return fmt.Errorf("unknown Position edge %s", name)
}

// UserMutation represents an operation that mutate the Users
// nodes in the graph.
type UserMutation struct {
	config
	op                     Op
	typ                    string
	id                     *int
	_DoctorName            *string
	_DoctorEmail           *string
	clearedFields          map[string]struct{}
	_UserDepartment        *int
	cleared_UserDepartment bool
	_UserExpertise         *int
	cleared_UserExpertise  bool
	_UserPosition          *int
	cleared_UserPosition   bool
	done                   bool
	oldValue               func(context.Context) (*User, error)
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows to manage the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for $n.Name.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the id field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetDoctorName sets the DoctorName field.
func (m *UserMutation) SetDoctorName(s string) {
	m._DoctorName = &s
}

// DoctorName returns the DoctorName value in the mutation.
func (m *UserMutation) DoctorName() (r string, exists bool) {
	v := m._DoctorName
	if v == nil {
		return
	}
	return *v, true
}

// OldDoctorName returns the old DoctorName value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldDoctorName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDoctorName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDoctorName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDoctorName: %w", err)
	}
	return oldValue.DoctorName, nil
}

// ResetDoctorName reset all changes of the "DoctorName" field.
func (m *UserMutation) ResetDoctorName() {
	m._DoctorName = nil
}

// SetDoctorEmail sets the DoctorEmail field.
func (m *UserMutation) SetDoctorEmail(s string) {
	m._DoctorEmail = &s
}

// DoctorEmail returns the DoctorEmail value in the mutation.
func (m *UserMutation) DoctorEmail() (r string, exists bool) {
	v := m._DoctorEmail
	if v == nil {
		return
	}
	return *v, true
}

// OldDoctorEmail returns the old DoctorEmail value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldDoctorEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDoctorEmail is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDoctorEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDoctorEmail: %w", err)
	}
	return oldValue.DoctorEmail, nil
}

// ResetDoctorEmail reset all changes of the "DoctorEmail" field.
func (m *UserMutation) ResetDoctorEmail() {
	m._DoctorEmail = nil
}

// SetUserDepartmentID sets the UserDepartment edge to Department by id.
func (m *UserMutation) SetUserDepartmentID(id int) {
	m._UserDepartment = &id
}

// ClearUserDepartment clears the UserDepartment edge to Department.
func (m *UserMutation) ClearUserDepartment() {
	m.cleared_UserDepartment = true
}

// UserDepartmentCleared returns if the edge UserDepartment was cleared.
func (m *UserMutation) UserDepartmentCleared() bool {
	return m.cleared_UserDepartment
}

// UserDepartmentID returns the UserDepartment id in the mutation.
func (m *UserMutation) UserDepartmentID() (id int, exists bool) {
	if m._UserDepartment != nil {
		return *m._UserDepartment, true
	}
	return
}

// UserDepartmentIDs returns the UserDepartment ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// UserDepartmentID instead. It exists only for internal usage by the builders.
func (m *UserMutation) UserDepartmentIDs() (ids []int) {
	if id := m._UserDepartment; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUserDepartment reset all changes of the "UserDepartment" edge.
func (m *UserMutation) ResetUserDepartment() {
	m._UserDepartment = nil
	m.cleared_UserDepartment = false
}

// SetUserExpertiseID sets the UserExpertise edge to Expertise by id.
func (m *UserMutation) SetUserExpertiseID(id int) {
	m._UserExpertise = &id
}

// ClearUserExpertise clears the UserExpertise edge to Expertise.
func (m *UserMutation) ClearUserExpertise() {
	m.cleared_UserExpertise = true
}

// UserExpertiseCleared returns if the edge UserExpertise was cleared.
func (m *UserMutation) UserExpertiseCleared() bool {
	return m.cleared_UserExpertise
}

// UserExpertiseID returns the UserExpertise id in the mutation.
func (m *UserMutation) UserExpertiseID() (id int, exists bool) {
	if m._UserExpertise != nil {
		return *m._UserExpertise, true
	}
	return
}

// UserExpertiseIDs returns the UserExpertise ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// UserExpertiseID instead. It exists only for internal usage by the builders.
func (m *UserMutation) UserExpertiseIDs() (ids []int) {
	if id := m._UserExpertise; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUserExpertise reset all changes of the "UserExpertise" edge.
func (m *UserMutation) ResetUserExpertise() {
	m._UserExpertise = nil
	m.cleared_UserExpertise = false
}

// SetUserPositionID sets the UserPosition edge to Position by id.
func (m *UserMutation) SetUserPositionID(id int) {
	m._UserPosition = &id
}

// ClearUserPosition clears the UserPosition edge to Position.
func (m *UserMutation) ClearUserPosition() {
	m.cleared_UserPosition = true
}

// UserPositionCleared returns if the edge UserPosition was cleared.
func (m *UserMutation) UserPositionCleared() bool {
	return m.cleared_UserPosition
}

// UserPositionID returns the UserPosition id in the mutation.
func (m *UserMutation) UserPositionID() (id int, exists bool) {
	if m._UserPosition != nil {
		return *m._UserPosition, true
	}
	return
}

// UserPositionIDs returns the UserPosition ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// UserPositionID instead. It exists only for internal usage by the builders.
func (m *UserMutation) UserPositionIDs() (ids []int) {
	if id := m._UserPosition; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUserPosition reset all changes of the "UserPosition" edge.
func (m *UserMutation) ResetUserPosition() {
	m._UserPosition = nil
	m.cleared_UserPosition = false
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m._DoctorName != nil {
		fields = append(fields, user.FieldDoctorName)
	}
	if m._DoctorEmail != nil {
		fields = append(fields, user.FieldDoctorEmail)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldDoctorName:
		return m.DoctorName()
	case user.FieldDoctorEmail:
		return m.DoctorEmail()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldDoctorName:
		return m.OldDoctorName(ctx)
	case user.FieldDoctorEmail:
		return m.OldDoctorEmail(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldDoctorName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDoctorName(v)
		return nil
	case user.FieldDoctorEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDoctorEmail(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldDoctorName:
		m.ResetDoctorName()
		return nil
	case user.FieldDoctorEmail:
		m.ResetDoctorEmail()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m._UserDepartment != nil {
		edges = append(edges, user.EdgeUserDepartment)
	}
	if m._UserExpertise != nil {
		edges = append(edges, user.EdgeUserExpertise)
	}
	if m._UserPosition != nil {
		edges = append(edges, user.EdgeUserPosition)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeUserDepartment:
		if id := m._UserDepartment; id != nil {
			return []ent.Value{*id}
		}
	case user.EdgeUserExpertise:
		if id := m._UserExpertise; id != nil {
			return []ent.Value{*id}
		}
	case user.EdgeUserPosition:
		if id := m._UserPosition; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.cleared_UserDepartment {
		edges = append(edges, user.EdgeUserDepartment)
	}
	if m.cleared_UserExpertise {
		edges = append(edges, user.EdgeUserExpertise)
	}
	if m.cleared_UserPosition {
		edges = append(edges, user.EdgeUserPosition)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeUserDepartment:
		return m.cleared_UserDepartment
	case user.EdgeUserExpertise:
		return m.cleared_UserExpertise
	case user.EdgeUserPosition:
		return m.cleared_UserPosition
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	case user.EdgeUserDepartment:
		m.ClearUserDepartment()
		return nil
	case user.EdgeUserExpertise:
		m.ClearUserExpertise()
		return nil
	case user.EdgeUserPosition:
		m.ClearUserPosition()
		return nil
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeUserDepartment:
		m.ResetUserDepartment()
		return nil
	case user.EdgeUserExpertise:
		m.ResetUserExpertise()
		return nil
	case user.EdgeUserPosition:
		m.ResetUserPosition()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
