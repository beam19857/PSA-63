// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/beam19857/app/ent/department"
	"github.com/beam19857/app/ent/expertise"
	"github.com/beam19857/app/ent/position"
	"github.com/beam19857/app/ent/user"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// UserCreate is the builder for creating a User entity.
type UserCreate struct {
	config
	mutation *UserMutation
	hooks    []Hook
}

// SetDoctorID sets the DoctorID field.
func (uc *UserCreate) SetDoctorID(i int) *UserCreate {
	uc.mutation.SetDoctorID(i)
	return uc
}

// SetDoctorName sets the DoctorName field.
func (uc *UserCreate) SetDoctorName(s string) *UserCreate {
	uc.mutation.SetDoctorName(s)
	return uc
}
// SetDoctorEmail sets the DoctorEmail field.
func (uc *UserCreate) SetDoctorEmail(s string) *UserCreate {
	uc.mutation.SetDoctorEmail(s)
	return uc
}


// SetDate sets the Date field.
func (uc *UserCreate) SetDate(t time.Time) *UserCreate {
	uc.mutation.SetDate(t)
	return uc
}

// SetUserDepartmentID sets the UserDepartment edge to Department by id.
func (uc *UserCreate) SetUserDepartmentID(id int) *UserCreate {
	uc.mutation.SetUserDepartmentID(id)
	return uc
}

// SetNillableUserDepartmentID sets the UserDepartment edge to Department by id if the given value is not nil.
func (uc *UserCreate) SetNillableUserDepartmentID(id *int) *UserCreate {
	if id != nil {
		uc = uc.SetUserDepartmentID(*id)
	}
	return uc
}

// SetUserDepartment sets the UserDepartment edge to Department.
func (uc *UserCreate) SetUserDepartment(d *Department) *UserCreate {
	return uc.SetUserDepartmentID(d.ID)
}

// SetUserExpertiseID sets the UserExpertise edge to Expertise by id.
func (uc *UserCreate) SetUserExpertiseID(id int) *UserCreate {
	uc.mutation.SetUserExpertiseID(id)
	return uc
}

// SetNillableUserExpertiseID sets the UserExpertise edge to Expertise by id if the given value is not nil.
func (uc *UserCreate) SetNillableUserExpertiseID(id *int) *UserCreate {
	if id != nil {
		uc = uc.SetUserExpertiseID(*id)
	}
	return uc
}

// SetUserExpertise sets the UserExpertise edge to Expertise.
func (uc *UserCreate) SetUserExpertise(e *Expertise) *UserCreate {
	return uc.SetUserExpertiseID(e.ID)
}

// SetUserPositionID sets the UserPosition edge to Position by id.
func (uc *UserCreate) SetUserPositionID(id int) *UserCreate {
	uc.mutation.SetUserPositionID(id)
	return uc
}

// SetNillableUserPositionID sets the UserPosition edge to Position by id if the given value is not nil.
func (uc *UserCreate) SetNillableUserPositionID(id *int) *UserCreate {
	if id != nil {
		uc = uc.SetUserPositionID(*id)
	}
	return uc
}

// SetUserPosition sets the UserPosition edge to Position.
func (uc *UserCreate) SetUserPosition(p *Position) *UserCreate {
	return uc.SetUserPositionID(p.ID)
}

// Mutation returns the UserMutation object of the builder.
func (uc *UserCreate) Mutation() *UserMutation {
	return uc.mutation
}

// Save creates the User in the database.
func (uc *UserCreate) Save(ctx context.Context) (*User, error) {
	if err := uc.preSave(); err != nil {
		return nil, err
	}
	var (
		err  error
		node *User
	)
	if len(uc.hooks) == 0 {
		node, err = uc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			uc.mutation = mutation
			node, err = uc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(uc.hooks) - 1; i >= 0; i-- {
			mut = uc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (uc *UserCreate) SaveX(ctx context.Context) *User {
	v, err := uc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (uc *UserCreate) preSave() error {
	if _, ok := uc.mutation.DoctorID(); !ok {
		return &ValidationError{Name: "DoctorID", err: errors.New("ent: missing required field \"DoctorID\"")}
	}
	if _, ok := uc.mutation.DoctorName(); !ok {
		return &ValidationError{Name: "DoctorName", err: errors.New("ent: missing required field \"DoctorName\"")}
	}
	if _, ok := uc.mutation.DoctorEmail(); !ok {
		return &ValidationError{Name: "DoctorEmail", err: errors.New("ent: missing required field \"DoctorEmail\"")}
	}
	if _, ok := uc.mutation.Date(); !ok {
		return &ValidationError{Name: "Date", err: errors.New("ent: missing required field \"Date\"")}
	}
	return nil
}

func (uc *UserCreate) sqlSave(ctx context.Context) (*User, error) {
	u, _spec := uc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	u.ID = int(id)
	return u, nil
}

func (uc *UserCreate) createSpec() (*User, *sqlgraph.CreateSpec) {
	var (
		u     = &User{config: uc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: user.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: user.FieldID,
			},
		}
	)
	if value, ok := uc.mutation.DoctorID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldDoctorID,
		})
		u.DoctorID = value
	}
	if value, ok := uc.mutation.DoctorName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldDoctorName,
		})
		u.DoctorName = value
	}
	if value, ok := uc.mutation.DoctorEmail(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldDoctorEmail,
		})
		u.DoctorEmail = value
	}
	if value, ok := uc.mutation.Date(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: user.FieldDate,
		})
		u.Date = value
	}
	if nodes := uc.mutation.UserDepartmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.UserDepartmentTable,
			Columns: []string{user.UserDepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: department.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.UserExpertiseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.UserExpertiseTable,
			Columns: []string{user.UserExpertiseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: expertise.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.UserPositionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.UserPositionTable,
			Columns: []string{user.UserPositionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: position.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return u, _spec
}

// UserCreateBulk is the builder for creating a bulk of User entities.
type UserCreateBulk struct {
	config
	builders []*UserCreate
}

// Save creates the User entities in the database.
func (ucb *UserCreateBulk) Save(ctx context.Context) ([]*User, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ucb.builders))
	nodes := make([]*User, len(ucb.builders))
	mutators := make([]Mutator, len(ucb.builders))
	for i := range ucb.builders {
		func(i int, root context.Context) {
			builder := ucb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				if err := builder.preSave(); err != nil {
					return nil, err
				}
				mutation, ok := m.(*UserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ucb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ucb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (ucb *UserCreateBulk) SaveX(ctx context.Context) []*User {
	v, err := ucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
