// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/beam19857/app/ent/expertise"
	"github.com/facebookincubator/ent/dialect/sql"
)

// Expertise is the model entity for the Expertise schema.
type Expertise struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ExpertiseName holds the value of the "ExpertiseName" field.
	ExpertiseName string `json:"ExpertiseName,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ExpertiseQuery when eager-loading is set.
	Edges ExpertiseEdges `json:"edges"`
}

// ExpertiseEdges holds the relations/edges for other nodes in the graph.
type ExpertiseEdges struct {
	// ExpertiseUser holds the value of the ExpertiseUser edge.
	ExpertiseUser []*User
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ExpertiseUserOrErr returns the ExpertiseUser value or an error if the edge
// was not loaded in eager-loading.
func (e ExpertiseEdges) ExpertiseUserOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.ExpertiseUser, nil
	}
	return nil, &NotLoadedError{edge: "ExpertiseUser"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Expertise) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // ExpertiseName
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Expertise fields.
func (e *Expertise) assignValues(values ...interface{}) error {
	if m, n := len(values), len(expertise.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	e.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field ExpertiseName", values[0])
	} else if value.Valid {
		e.ExpertiseName = value.String
	}
	return nil
}

// QueryExpertiseUser queries the ExpertiseUser edge of the Expertise.
func (e *Expertise) QueryExpertiseUser() *UserQuery {
	return (&ExpertiseClient{config: e.config}).QueryExpertiseUser(e)
}

// Update returns a builder for updating this Expertise.
// Note that, you need to call Expertise.Unwrap() before calling this method, if this Expertise
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Expertise) Update() *ExpertiseUpdateOne {
	return (&ExpertiseClient{config: e.config}).UpdateOne(e)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (e *Expertise) Unwrap() *Expertise {
	tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Expertise is not a transactional entity")
	}
	e.config.driver = tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Expertise) String() string {
	var builder strings.Builder
	builder.WriteString("Expertise(")
	builder.WriteString(fmt.Sprintf("id=%v", e.ID))
	builder.WriteString(", ExpertiseName=")
	builder.WriteString(e.ExpertiseName)
	builder.WriteByte(')')
	return builder.String()
}

// Expertises is a parsable slice of Expertise.
type Expertises []*Expertise

func (e Expertises) config(cfg config) {
	for _i := range e {
		e[_i].config = cfg
	}
}
