// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/beam19857/app/ent/expertise"
	"github.com/beam19857/app/ent/user"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// ExpertiseCreate is the builder for creating a Expertise entity.
type ExpertiseCreate struct {
	config
	mutation *ExpertiseMutation
	hooks    []Hook
}

// SetExpertiseID sets the ExpertiseID field.
func (ec *ExpertiseCreate) SetExpertiseID(i int) *ExpertiseCreate {
	ec.mutation.SetExpertiseID(i)
	return ec
}

// SetExpertiseName sets the ExpertiseName field.
func (ec *ExpertiseCreate) SetExpertiseName(s string) *ExpertiseCreate {
	ec.mutation.SetExpertiseName(s)
	return ec
}

// SetLicenes sets the Licenes field.
func (ec *ExpertiseCreate) SetLicenes(s string) *ExpertiseCreate {
	ec.mutation.SetLicenes(s)
	return ec
}

// AddExpertiseUserIDs adds the ExpertiseUser edge to User by ids.
func (ec *ExpertiseCreate) AddExpertiseUserIDs(ids ...int) *ExpertiseCreate {
	ec.mutation.AddExpertiseUserIDs(ids...)
	return ec
}

// AddExpertiseUser adds the ExpertiseUser edges to User.
func (ec *ExpertiseCreate) AddExpertiseUser(u ...*User) *ExpertiseCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ec.AddExpertiseUserIDs(ids...)
}

// Mutation returns the ExpertiseMutation object of the builder.
func (ec *ExpertiseCreate) Mutation() *ExpertiseMutation {
	return ec.mutation
}

// Save creates the Expertise in the database.
func (ec *ExpertiseCreate) Save(ctx context.Context) (*Expertise, error) {
	if err := ec.preSave(); err != nil {
		return nil, err
	}
	var (
		err  error
		node *Expertise
	)
	if len(ec.hooks) == 0 {
		node, err = ec.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ExpertiseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ec.mutation = mutation
			node, err = ec.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ec.hooks) - 1; i >= 0; i-- {
			mut = ec.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ec.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ec *ExpertiseCreate) SaveX(ctx context.Context) *Expertise {
	v, err := ec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ec *ExpertiseCreate) preSave() error {
	if _, ok := ec.mutation.ExpertiseID(); !ok {
		return &ValidationError{Name: "ExpertiseID", err: errors.New("ent: missing required field \"ExpertiseID\"")}
	}
	if _, ok := ec.mutation.ExpertiseName(); !ok {
		return &ValidationError{Name: "ExpertiseName", err: errors.New("ent: missing required field \"ExpertiseName\"")}
	}
	if _, ok := ec.mutation.Licenes(); !ok {
		return &ValidationError{Name: "Licenes", err: errors.New("ent: missing required field \"Licenes\"")}
	}
	return nil
}

func (ec *ExpertiseCreate) sqlSave(ctx context.Context) (*Expertise, error) {
	e, _spec := ec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ec.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	e.ID = int(id)
	return e, nil
}

func (ec *ExpertiseCreate) createSpec() (*Expertise, *sqlgraph.CreateSpec) {
	var (
		e     = &Expertise{config: ec.config}
		_spec = &sqlgraph.CreateSpec{
			Table: expertise.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: expertise.FieldID,
			},
		}
	)
	if value, ok := ec.mutation.ExpertiseID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: expertise.FieldExpertiseID,
		})
		e.ExpertiseID = value
	}
	if value, ok := ec.mutation.ExpertiseName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: expertise.FieldExpertiseName,
		})
		e.ExpertiseName = value
	}
	if value, ok := ec.mutation.Licenes(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: expertise.FieldLicenes,
		})
		e.Licenes = value
	}
	if nodes := ec.mutation.ExpertiseUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   expertise.ExpertiseUserTable,
			Columns: []string{expertise.ExpertiseUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return e, _spec
}

// ExpertiseCreateBulk is the builder for creating a bulk of Expertise entities.
type ExpertiseCreateBulk struct {
	config
	builders []*ExpertiseCreate
}

// Save creates the Expertise entities in the database.
func (ecb *ExpertiseCreateBulk) Save(ctx context.Context) ([]*Expertise, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ecb.builders))
	nodes := make([]*Expertise, len(ecb.builders))
	mutators := make([]Mutator, len(ecb.builders))
	for i := range ecb.builders {
		func(i int, root context.Context) {
			builder := ecb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				if err := builder.preSave(); err != nil {
					return nil, err
				}
				mutation, ok := m.(*ExpertiseMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ecb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ecb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (ecb *ExpertiseCreateBulk) SaveX(ctx context.Context) []*Expertise {
	v, err := ecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
